
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000669  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000599  00000000  00000000  000008c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fb  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000327  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000014ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "Timer.h"
volatile unsigned char counterLED1 = 0,counterLED2 = 0;
volatile unsigned short counterLED3 = 0;
int main(void)
{
   	Timer0_vInit();
  7c:	0e 94 87 00 	call	0x10e	; 0x10e <Timer0_vInit>
	   }
	
	   if(counterLED2 == 200)
	   {
		  DDRD |= (1<<6);
		  PORTD ^= (1<<6);
  80:	20 e4       	ldi	r18, 0x40	; 64
		 counterLED2=0;
	   }   
		if(counterLED3 == 300)
		{
			DDRD |= (1<<5);
			PORTD ^= (1<<5);
  82:	30 e2       	ldi	r19, 0x20	; 32
int main(void)
{
   	Timer0_vInit();
	while(1)
	{
	   if(counterLED1 == 100)
  84:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <counterLED1>
  88:	84 36       	cpi	r24, 0x64	; 100
  8a:	31 f4       	brne	.+12     	; 0x98 <main+0x1c>
	   {
		   DDRD |= (1<<7);
  8c:	8f 9a       	sbi	0x11, 7	; 17
		   PORTD ^= (1<<7);
  8e:	82 b3       	in	r24, 0x12	; 18
  90:	80 58       	subi	r24, 0x80	; 128
  92:	82 bb       	out	0x12, r24	; 18
		   counterLED1=0;
  94:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counterLED1>
		   
	   }
	
	   if(counterLED2 == 200)
  98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counterLED2>
  9c:	88 3c       	cpi	r24, 0xC8	; 200
  9e:	31 f4       	brne	.+12     	; 0xac <main+0x30>
	   {
		  DDRD |= (1<<6);
  a0:	8e 9a       	sbi	0x11, 6	; 17
		  PORTD ^= (1<<6);
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	82 27       	eor	r24, r18
  a6:	82 bb       	out	0x12, r24	; 18
		 counterLED2=0;
  a8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counterLED2>
	   }   
		if(counterLED3 == 300)
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  b0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  b4:	8c 32       	cpi	r24, 0x2C	; 44
  b6:	91 40       	sbci	r25, 0x01	; 1
  b8:	29 f7       	brne	.-54     	; 0x84 <main+0x8>
		{
			DDRD |= (1<<5);
  ba:	8d 9a       	sbi	0x11, 5	; 17
			PORTD ^= (1<<5);
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	83 27       	eor	r24, r19
  c0:	82 bb       	out	0x12, r24	; 18
			counterLED3=0;
  c2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  c6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  ca:	dc cf       	rjmp	.-72     	; 0x84 <main+0x8>

000000cc <__vector_10>:
	}
   
}

ISR(TIMER0_COMP_vect)
{	
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
	
	counterLED1++;	
  da:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <counterLED1>
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <counterLED1>
	counterLED2++;
  e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counterLED2>
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counterLED2>
	counterLED3++;
  ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <Timer0_vInit>:
#include "macros.h"
void Timer0_vInit(void)
{
	
	/*ctc MODE */
	SET_BIT(TCCR0,WGM01);
 10e:	83 b7       	in	r24, 0x33	; 51
 110:	88 60       	ori	r24, 0x08	; 8
 112:	83 bf       	out	0x33, r24	; 51
	/*ENABLE INTERUPT*/
  SET_BIT(TIMSK,OCIE0);
 114:	89 b7       	in	r24, 0x39	; 57
 116:	82 60       	ori	r24, 0x02	; 2
 118:	89 bf       	out	0x39, r24	; 57
  sei();
 11a:	78 94       	sei
  /* REQUEST EVERY 10MS*/ 	
  OCR0 = 78;
 11c:	8e e4       	ldi	r24, 0x4E	; 78
 11e:	8c bf       	out	0x3c, r24	; 60
  /*Choose  clock prescaler*/
  SET_BIT(TCCR0,CS00);
 120:	83 b7       	in	r24, 0x33	; 51
 122:	81 60       	ori	r24, 0x01	; 1
 124:	83 bf       	out	0x33, r24	; 51
  SET_BIT(TCCR0,CS02); 	
 126:	83 b7       	in	r24, 0x33	; 51
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	83 bf       	out	0x33, r24	; 51
 12c:	08 95       	ret

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
